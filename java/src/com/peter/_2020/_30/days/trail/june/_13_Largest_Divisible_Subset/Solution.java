package com.peter._2020._30.days.trail.june._13_Largest_Divisible_Subset;

import java.time.Duration;
import java.time.LocalDateTime;
import java.util.*;

public class Solution {
    public static void main(String[] args) {
        Solution solution = new Solution();
        var start = LocalDateTime.now();
        System.out.println(solution.largestDivisibleSubset(new int[]{3, 4, 16, 8}));
        assert solution.largestDivisibleSubset(new int[]{1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024,
                2048, 4096, 8192, 16384, 32768, 65536, 131072, 262144, 524288, 1048576, 2097152, 4194304, 8388608,
                16777216, 33554432, 67108864, 134217728, 268435456, 536870912, 1073741824}).size() == 31;
        assert solution.largestDivisibleSubset(new int[]{633, 606, 592, 684, 54, 149, 608, 300, 135, 152, 667, 953,
                750, 70, 578, 121, 906, 656, 908, 379, 254, 345, 189, 642, 748, 585, 192, 811, 851, 483, 949, 89, 540
                , 166, 494, 40, 125, 794, 526, 276, 812, 830, 26, 233, 407, 498, 139, 62, 757, 869, 101, 57, 308, 200
                , 993, 852, 362, 844, 334, 311, 326, 774, 850, 492, 620, 890, 968, 765, 767, 244, 576, 597, 621, 809,
                3, 118, 299, 417, 874, 519, 83, 327, 391, 878, 568, 594, 240, 763, 927, 902, 53, 751, 932, 672, 992,
                899, 436, 111, 363, 707, 114, 523, 709, 583, 173, 692, 560, 487, 619, 950, 716, 538, 895, 307, 301,
                208, 741, 225, 959, 248, 302, 922, 35, 412, 768, 272, 179, 168, 797, 655, 976, 840, 214, 814, 458,
                515, 529, 347, 409, 836, 647, 582, 43, 387, 158, 353, 410, 406, 440, 418, 803, 888, 813, 66, 202, 609
                , 72, 448, 286, 342, 257, 871, 603, 561, 58, 602, 100, 340, 651, 453, 102, 56, 459, 785, 848, 876,
                939, 388, 115, 973, 552, 532, 527, 160, 604, 55, 241, 397, 567, 392, 170, 952, 676, 123, 445, 127,
                462, 579, 563, 503, 389, 702, 617, 285, 442, 731, 610, 263, 136, 505, 866, 542, 815, 106, 290, 382,
                497, 903, 801, 935, 25, 486, 44, 49, 381, 747, 600, 997, 384, 41, 727, 34, 989, 832, 206, 373, 352,
                663, 85, 987, 960, 857, 556, 918, 849, 261, 249, 641, 995, 449, 637, 730, 842, 364, 74, 875, 704, 905
                , 764, 910, 630, 467, 572, 292, 565, 42, 421, 253, 690, 901, 951, 701, 591, 47, 198, 580, 777, 39,
                295, 265, 998, 380, 259, 88, 847, 183, 913, 639, 68, 891, 256, 343, 156, 59, 2, 90, 454, 581, 218,
                493, 227, 419, 109, 229, 489, 835, 316, 335, 369, 46, 693, 760, 317, 546, 868, 11, 957, 280, 860, 64,
                607, 438, 834, 715, 13, 63, 203, 199, 889, 128, 820, 490, 36, 798, 428, 724, 185, 31, 159, 446, 831,
                16, 694, 386, 775, 626, 133, 332, 721, 403, 172, 599, 648, 524, 879, 554, 92, 612, 670, 95, 243, 500,
                110, 288, 885, 675, 863, 807, 964, 164, 687, 222, 174, 264, 817, 303, 778, 545, 338, 239, 574, 893,
                282, 956, 120, 481, 859, 404, 161, 287, 533, 624, 771, 197, 485, 723, 451, 649, 758, 752, 518, 520,
                502, 130, 643, 236, 699, 211, 408, 423, 466, 215, 753, 886, 934, 734, 525, 94, 736, 623, 749, 786,
                833, 76, 783, 275, 668, 661, 841, 420, 788, 443, 14, 355, 625, 314, 826, 184, 805, 284, 943, 32, 18,
                224, 220, 559, 441, 887, 571, 658, 358, 689, 383, 163, 394, 60, 933, 892, 262, 140, 50, 165, 719, 376
                , 330, 838, 827, 1000, 588, 679, 182, 629, 872, 970, 351, 45, 965, 372, 547, 589, 116, 898, 278, 117,
                251, 190, 194, 6, 511, 104, 530, 861, 846, 61, 881, 739, 230, 854, 683, 555, 646, 678, 97, 839, 12,
                954, 937, 558, 15, 354, 740, 93, 238, 298, 781, 657, 426, 544, 616, 368, 979, 669, 738, 78, 601, 268,
                823, 696, 65, 67, 495, 787, 217, 488, 38, 33, 980, 252, 144, 562, 339, 522, 425, 281, 472, 710, 982,
                470, 103, 907, 19, 312, 825, 304, 87, 424, 10, 945, 210, 553, 681, 390, 759, 52, 569, 977, 936, 640,
                296, 870, 305, 422, 743, 195, 660, 955, 204, 961, 71, 69, 575, 590, 659, 232, 853, 754, 7, 766, 962,
                507, 517, 940, 802, 153, 631, 877, 336, 944, 346, 337, 433, 941, 539, 947, 796, 260, 270, 150, 27,
                474, 325, 810, 399, 175, 584, 416, 598, 653, 465, 677, 377, 427}).size() == 8;
        assert solution.largestDivisibleSubset(new int[]{832, 33, 531, 416, 335, 298, 365, 352, 582, 936, 366, 305,
                930, 530, 97, 349, 71, 295, 840, 108, 299, 804, 925, 627, 953, 571, 658, 732, 429, 136, 563, 462, 666
                , 330, 796, 315, 695, 500, 896, 982, 217, 200, 912, 98, 297, 612, 169, 943, 628, 593, 959, 904, 219,
                240, 857, 789, 897, 940, 569, 384, 502, 382, 401, 184, 716, 230, 29, 963, 211, 597, 515, 122, 163, 86
                , 215, 105, 889, 842, 49, 847, 267, 87, 954, 407, 245, 975, 719, 746, 709, 471, 281, 238, 186, 510,
                618, 149, 73, 214, 663, 194, 260, 825, 631, 474, 519, 668, 329, 718, 765, 947, 156, 353, 490, 962,
                679, 560, 59, 387, 31, 692, 976, 568, 201, 273, 159, 730, 819, 418, 906, 801, 892, 672, 559, 866, 389
                , 675, 812, 744, 164, 737, 57, 195, 115, 933, 158, 909, 598, 359, 853, 314, 983, 11, 395, 153, 781,
                301, 838, 625, 704, 256, 351, 996, 225, 644, 521, 509, 674, 417, 272, 622, 937, 723, 632, 331, 228,
                412, 181, 435, 469, 157, 368, 524, 38, 132, 325, 420, 127, 731, 771, 604, 505, 634, 67, 374, 894, 3,
                448, 878, 686, 641, 316, 207, 76, 363, 795, 235, 770, 446, 820, 493, 177, 816, 615, 410, 117, 944,
                829, 190, 831, 289, 516, 964, 170, 134, 671, 885, 682, 119, 402, 82, 485, 901, 375, 68, 858, 739, 56,
                974, 683, 884, 815, 872, 715, 104, 290, 348, 588, 834, 788, 472, 466, 867, 550, 779, 65, 802, 459,
                440, 870, 753, 608, 808, 623, 642, 44, 437, 865, 758, 540, 506, 691, 958, 854, 546, 39, 595, 369, 504
                , 63, 311, 722, 441, 786, 899, 338, 651, 874, 946, 811, 848, 939, 284, 824, 309, 653, 133, 514, 460,
                678, 54, 399, 759, 468, 61, 480, 783, 266, 900, 400, 237, 403, 534, 213, 914, 473, 198, 380, 373, 288
                , 154, 844, 535, 409, 249, 285, 168, 69, 345, 647, 851, 846, 264, 102, 246, 106, 648, 576, 212, 438,
                981, 987, 379, 360, 667, 95, 172, 101, 580, 891, 385, 747, 161, 927, 361, 818, 657, 171, 342, 232,
                734, 714, 362, 425, 475, 28, 41, 551, 142, 131, 51, 229, 9, 607, 326, 522, 687, 792, 845, 665, 358,
                91, 720, 155, 565, 99, 26, 650, 539, 780, 589, 950, 935, 372, 227, 424, 750, 833, 554, 841, 552, 60,
                757, 430, 916, 140, 790, 426, 776, 96, 199, 923, 806, 949, 755, 711, 659, 911, 611, 310, 774, 265,
                880, 690, 706, 761, 286, 255, 756, 204, 444, 478, 601, 529, 669, 241, 784, 566, 528, 208, 270, 511,
                236, 271, 378, 58, 453, 467, 233, 250, 567, 296, 932, 989, 367, 626, 35, 162, 887, 572, 603, 564, 797
                , 280, 406, 970, 689, 408, 431, 638, 489, 85, 50, 357, 803, 47, 555, 793, 422, 763, 110, 869, 861,
                253, 320, 538, 347, 405, 769, 64, 875, 630, 537, 328, 553, 166, 948, 303, 160, 800, 507, 920, 922, 90
                , 693, 636, 17, 455, 183, 210, 856, 762, 656, 174, 873, 579, 176, 688, 640, 1, 938, 902, 341, 740,
                581, 427, 111, 972, 443, 22, 791, 304, 574, 575, 725, 477, 700, 817, 381, 479, 248, 121, 411, 547,
                182, 871, 599, 203, 13, 224, 541, 724, 178, 775, 388, 4, 251, 321, 52, 88, 100, 279, 614, 839, 84,
                151, 735, 40, 752, 773, 376, 77, 476, 708, 396, 988, 961, 24, 231, 445, 609, 952, 965, 986, 414, 451,
                881, 42, 257, 32, 334, 130, 596, 527, 94, 333, 317, 244, 960, 710, 852, 862, 421, 81, 37, 452, 274,
                187, 268, 520, 491, 778, 18, 743, 620, 145, 72, 370, 118, 748, 633, 997, 436, 143, 573, 495, 180, 34}).size() == 8;
        var end = LocalDateTime.now();
        System.out.println(Duration.between(start, end).toMillis());
    }

    public List<Integer> largestDivisibleSubset(int[] nums) {
        if (nums.length == 0) return Collections.emptyList();

        Arrays.sort(nums);
        List<List<Integer>> allSubsets = new ArrayList<>();
        for (int val : nums) {
            var isInSubset = false;
            var values = new HashSet<Integer>();

            for (int i = allSubsets.size() - 1; i >= 0; i--) {
                List<Integer> subset = allSubsets.get(i);
                var last = subset.get(subset.size() - 1);
                if (val % last != 0 || values.contains(last)) continue;

                var newSubset = new ArrayList<>(subset);
                newSubset.add(val);
                values.addAll(subset);
                values.remove(last);
                allSubsets.add(newSubset);
                isInSubset = true;
            }

            if (!isInSubset) {
                var subset = new ArrayList<Integer>();
                subset.add(val);
                allSubsets.add(subset);
            }
        }

        List<Integer> result = allSubsets.get(0);
        for (int i = 1; i < allSubsets.size(); i++) {
            List<Integer> subset = allSubsets.get(i);
            if (subset.size() > result.size()) result = subset;
        }
        return result;
    }
}
