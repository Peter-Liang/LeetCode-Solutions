import generateParenthesis from "../solutions/22.generate-parentheses"

describe("problem 22", () => {
  test("case 1", () => {
    const result = generateParenthesis(3)
    const expected = ["((()))", "(()())", "(())()", "()(())", "()()()"]
    expect(result).toHaveLength(expected.length)
    result.forEach(a => {
      expect(expected).toContainEqual(a)
    })
  })

  test("case 2", () => {
    const result = generateParenthesis(4)
    const expected = [
      "(((())))",
      "((()()))",
      "((())())",
      "((()))()",
      "(()(()))",
      "(()()())",
      "(()())()",
      "(())(())",
      "(())()()",
      "()((()))",
      "()(()())",
      "()(())()",
      "()()(())",
      "()()()()",
    ]
    expected.forEach(a => {
      expect(result).toContainEqual(a)
    })
    expect(result).toHaveLength(expected.length)
  })

  test("case 3", () => {
    const result = generateParenthesis(6)
    const expected = [
      "(((((())))))",
      "((((()()))))",
      "((((())())))",
      "((((()))()))",
      "((((())))())",
      "((((()))))()",
      "(((()(()))))",
      "(((()()())))",
      "(((()())()))",
      "(((()()))())",
      "(((()())))()",
      "(((())(())))",
      "(((())()()))",
      "(((())())())",
      "(((())()))()",
      "(((()))(()))",
      "(((()))()())",
      "(((()))())()",
      "(((())))(())",
      "(((())))()()",
      "((()((()))))",
      "((()(()())))",
      "((()(())()))",
      "((()(()))())",
      "((()(())))()",
      "((()()(())))",
      "((()()()()))",
      "((()()())())",
      "((()()()))()",
      "((()())(()))",
      "((()())()())",
      "((()())())()",
      "((()()))(())",
      "((()()))()()",
      "((())((())))",
      "((())(()()))",
      "((())(())())",
      "((())(()))()",
      "((())()(()))",
      "((())()()())",
      "((())()())()",
      "((())())(())",
      "((())())()()",
      "((()))((()))",
      "((()))(()())",
      "((()))(())()",
      "((()))()(())",
      "((()))()()()",
      "(()(((()))))",
      "(()((()())))",
      "(()((())()))",
      "(()((()))())",
      "(()((())))()",
      "(()(()(())))",
      "(()(()()()))",
      "(()(()())())",
      "(()(()()))()",
      "(()(())(()))",
      "(()(())()())",
      "(()(())())()",
      "(()(()))(())",
      "(()(()))()()",
      "(()()((())))",
      "(()()(()()))",
      "(()()(())())",
      "(()()(()))()",
      "(()()()(()))",
      "(()()()()())",
      "(()()()())()",
      "(()()())(())",
      "(()()())()()",
      "(()())((()))",
      "(()())(()())",
      "(()())(())()",
      "(()())()(())",
      "(()())()()()",
      "(())(((())))",
      "(())((()()))",
      "(())((())())",
      "(())((()))()",
      "(())(()(()))",
      "(())(()()())",
      "(())(()())()",
      "(())(())(())",
      "(())(())()()",
      "(())()((()))",
      "(())()(()())",
      "(())()(())()",
      "(())()()(())",
      "(())()()()()",
      "()((((()))))",
      "()(((()())))",
      "()(((())()))",
      "()(((()))())",
      "()(((())))()",
      "()((()(())))",
      "()((()()()))",
      "()((()())())",
      "()((()()))()",
      "()((())(()))",
      "()((())()())",
      "()((())())()",
      "()((()))(())",
      "()((()))()()",
      "()(()((())))",
      "()(()(()()))",
      "()(()(())())",
      "()(()(()))()",
      "()(()()(()))",
      "()(()()()())",
      "()(()()())()",
      "()(()())(())",
      "()(()())()()",
      "()(())((()))",
      "()(())(()())",
      "()(())(())()",
      "()(())()(())",
      "()(())()()()",
      "()()(((())))",
      "()()((()()))",
      "()()((())())",
      "()()((()))()",
      "()()(()(()))",
      "()()(()()())",
      "()()(()())()",
      "()()(())(())",
      "()()(())()()",
      "()()()((()))",
      "()()()(()())",
      "()()()(())()",
      "()()()()(())",
      "()()()()()()",
    ]
    expected.forEach(a => {
      expect(result).toContainEqual(a)
    })
    expect(result).toHaveLength(expected.length)
  })
})
